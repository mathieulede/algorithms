{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network Diagram\n",
    "\n",
    "### Method 2.1: GraphViz, which you probably won't use\n",
    "\n",
    "```bash\n",
    "pip3 install graphviz\n",
    "brew install graphviz\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import graphviz as gv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can use GraphViz to make **undirected graphs** by adding edges. You can also add notes but hey, who cares!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"411pt\" height=\"260pt\"\n",
       " viewBox=\"0.00 0.00 411.38 260.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 256)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-256 407.3806,-256 407.3806,4 -4,4\"/>\n",
       "<!-- Hamburgers -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>Hamburgers</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"129.8826\" cy=\"-234\" rx=\"53.8275\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"129.8826\" y=\"-229.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Hamburgers</text>\n",
       "</g>\n",
       "<!-- Milkshakes -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>Milkshakes</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"50.8826\" cy=\"-162\" rx=\"50.7655\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"50.8826\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Milkshakes</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&#45;Milkshakes -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&#45;Milkshakes</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M111.1607,-216.937C98.5675,-205.4596 82.0352,-190.3922 69.4701,-178.9405\"/>\n",
       "</g>\n",
       "<!-- French Fries -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>French Fries</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"231.8826\" cy=\"-18\" rx=\"54.6234\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"231.8826\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">French Fries</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&#45;French Fries -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&#45;French Fries</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M127.3069,-215.8639C123.7554,-184.1038 120.6633,-117.4766 148.8826,-72 160.0315,-54.0331 179.6276,-40.8653 196.9799,-32.0327\"/>\n",
       "</g>\n",
       "<!-- Chicken -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>Chicken</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"201.8826\" cy=\"-162\" rx=\"39.6558\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"201.8826\" y=\"-157.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Chicken</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&#45;Chicken -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&#45;Chicken</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M147.3118,-216.5708C158.7985,-205.0841 173.7587,-190.1239 185.1097,-178.7729\"/>\n",
       "</g>\n",
       "<!-- Hot Dogs -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>Hot Dogs</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"201.8826\" cy=\"-90\" rx=\"44.01\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"201.8826\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Hot Dogs</text>\n",
       "</g>\n",
       "<!-- Chicken&#45;&#45;Hot Dogs -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>Chicken&#45;&#45;Hot Dogs</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M201.8826,-143.8314C201.8826,-133 201.8826,-119.2876 201.8826,-108.4133\"/>\n",
       "</g>\n",
       "<!-- Chicken Tenders -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>Chicken Tenders</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"333.8826\" cy=\"-90\" rx=\"69.4959\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"333.8826\" y=\"-85.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Chicken Tenders</text>\n",
       "</g>\n",
       "<!-- Chicken&#45;&#45;Chicken Tenders -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>Chicken&#45;&#45;Chicken Tenders</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M227.3336,-148.1177C249.2094,-136.1854 280.7889,-118.9602 303.8885,-106.3604\"/>\n",
       "</g>\n",
       "<!-- Chicken Tenders&#45;&#45;French Fries -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>Chicken Tenders&#45;&#45;French Fries</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M309.71,-72.937C293.2148,-61.2933 271.4852,-45.9547 255.1796,-34.4449\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Graph at 0x1043a9278>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = gv.Graph()\n",
    "\n",
    "# g.node(\"Hamburgers\")\n",
    "# g.node(\"Milkshakes\")\n",
    "# g.node(\"French Fries\")\n",
    "\n",
    "g.edge(\"Hamburgers\", \"Milkshakes\")\n",
    "g.edge(\"Hamburgers\", \"French Fries\")\n",
    "g.edge(\"Hamburgers\", \"Chicken\")\n",
    "g.edge(\"Chicken\", \"Hot Dogs\")\n",
    "g.edge(\"Chicken\", \"Chicken Tenders\")\n",
    "g.edge(\"Chicken Tenders\", \"French Fries\")\n",
    "\n",
    "g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you want to get crazier, you can also make **directed graphs** and add **labels** to the connections."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
       "<!-- Generated by graphviz version 2.40.1 (20161225.0304)\n",
       " -->\n",
       "<!-- Title: %3 Pages: 1 -->\n",
       "<svg width=\"411pt\" height=\"289pt\"\n",
       " viewBox=\"0.00 0.00 411.38 289.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 285)\">\n",
       "<title>%3</title>\n",
       "<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-285 407.3806,-285 407.3806,4 -4,4\"/>\n",
       "<!-- Hamburgers -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>Hamburgers</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"145.8826\" cy=\"-263\" rx=\"53.8275\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"145.8826\" y=\"-258.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Hamburgers</text>\n",
       "</g>\n",
       "<!-- Milkshakes -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>Milkshakes</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"50.8826\" cy=\"-177\" rx=\"50.7655\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"50.8826\" y=\"-172.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Milkshakes</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&gt;Milkshakes -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&gt;Milkshakes</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M110.243,-249.4732C98.6404,-243.8177 86.3557,-236.3506 77.0066,-227 70.5362,-220.5286 65.3089,-212.1203 61.2792,-204.0511\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"64.4275,-202.5193 57.0961,-194.8707 58.0576,-205.4218 64.4275,-202.5193\"/>\n",
       "<text text-anchor=\"middle\" x=\"97.3206\" y=\"-215.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">friends</text>\n",
       "</g>\n",
       "<!-- French Fries -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>French Fries</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"141.8826\" cy=\"-18\" rx=\"54.6234\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"141.8826\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">French Fries</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&gt;French Fries -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&gt;French Fries</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M145.5885,-244.9846C144.8993,-202.7738 143.1759,-97.2107 142.3449,-46.3156\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"145.8401,-45.9833 142.1772,-36.0418 138.841,-46.0977 145.8401,-45.9833\"/>\n",
       "<text text-anchor=\"middle\" x=\"162.5413\" y=\"-129.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">enemy</text>\n",
       "</g>\n",
       "<!-- Chicken -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>Chicken</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"213.8826\" cy=\"-177\" rx=\"39.6558\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"213.8826\" y=\"-172.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Chicken</text>\n",
       "</g>\n",
       "<!-- Hamburgers&#45;&gt;Chicken -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>Hamburgers&#45;&gt;Chicken</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M149.7341,-244.5971C152.4968,-234.5424 156.9968,-222.2849 164.0066,-213 168.5188,-207.0234 174.3014,-201.6198 180.3199,-196.9237\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"182.5114,-199.6586 188.576,-190.9712 178.4175,-193.9805 182.5114,-199.6586\"/>\n",
       "<text text-anchor=\"middle\" x=\"183.3206\" y=\"-215.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">friends</text>\n",
       "</g>\n",
       "<!-- Chicken&#45;&gt;Hamburgers -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>Chicken&#45;&gt;Hamburgers</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M213.2848,-195.0161C212.1688,-205.1882 209.4188,-217.6882 202.8826,-227 198.6295,-233.0593 192.9985,-238.322 186.9302,-242.8118\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"184.8464,-239.9946 178.4724,-248.4576 188.7328,-245.8167 184.8464,-239.9946\"/>\n",
       "<text text-anchor=\"middle\" x=\"228.3206\" y=\"-215.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">friends</text>\n",
       "</g>\n",
       "<!-- Hot Dogs -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>Hot Dogs</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"201.8826\" cy=\"-91\" rx=\"44.01\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"201.8826\" y=\"-86.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Hot Dogs</text>\n",
       "</g>\n",
       "<!-- Chicken&#45;&gt;Hot Dogs -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>Chicken&#45;&gt;Hot Dogs</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M211.3377,-158.7616C209.7468,-147.3597 207.6641,-132.4342 205.8585,-119.494\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"209.2723,-118.6324 204.4238,-109.2121 202.3395,-119.5999 209.2723,-118.6324\"/>\n",
       "<text text-anchor=\"middle\" x=\"227.3206\" y=\"-129.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">friends</text>\n",
       "</g>\n",
       "<!-- Chicken Tenders -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>Chicken Tenders</title>\n",
       "<ellipse fill=\"none\" stroke=\"#000000\" cx=\"333.8826\" cy=\"-91\" rx=\"69.4959\" ry=\"18\"/>\n",
       "<text text-anchor=\"middle\" x=\"333.8826\" y=\"-86.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">Chicken Tenders</text>\n",
       "</g>\n",
       "<!-- Chicken&#45;&gt;Chicken Tenders -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>Chicken&#45;&gt;Chicken Tenders</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M235.3362,-161.6249C253.8226,-148.3764 280.7749,-129.0605 301.822,-113.9768\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"304.0582,-116.6802 310.1476,-108.0101 299.9806,-110.9905 304.0582,-116.6802\"/>\n",
       "<text text-anchor=\"middle\" x=\"299.5413\" y=\"-129.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">enemy</text>\n",
       "</g>\n",
       "<!-- Chicken Tenders&#45;&gt;French Fries -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>Chicken Tenders&#45;&gt;French Fries</title>\n",
       "<path fill=\"none\" stroke=\"#000000\" d=\"M294.5652,-76.0512C263.5444,-64.2568 220.2214,-47.785 187.6444,-35.399\"/>\n",
       "<polygon fill=\"#000000\" stroke=\"#000000\" points=\"188.4959,-31.9784 177.9048,-31.6959 186.0081,-38.5214 188.4959,-31.9784\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>\n"
      ],
      "text/plain": [
       "<graphviz.dot.Digraph at 0x10439a160>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "g = gv.Digraph()\n",
    "\n",
    "g.edge(\"Hamburgers\", \"Milkshakes\", label=\"friends\")\n",
    "g.edge(\"Hamburgers\", \"French Fries\", label=\"enemy\")\n",
    "g.edge(\"Hamburgers\", \"Chicken\", label=\"friends\")\n",
    "g.edge(\"Chicken\", \"Hamburgers\", label=\"friends\")\n",
    "g.edge(\"Chicken\", \"Hot Dogs\", label=\"friends\")\n",
    "g.edge(\"Chicken\", \"Chicken Tenders\", label=\"enemy\")\n",
    "g.edge(\"Chicken Tenders\", \"French Fries\")\n",
    "\n",
    "g"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Method 2.2: NetworkX\n",
    "\n",
    "NetworkX is **much cooler** than GraphViz! What's the real difference? Well... NetworkX is cooler?\n",
    "\n",
    "```bash\n",
    "pip3 install networkx\n",
    "```\n",
    "\n",
    "You might need to brew install something, too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import networkx as nx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nio6O1osvvmg6SotiBAs0UW1trR588EEdPXpUOTk5ateunelIgGN9+OGHGjFihMrKynTZZZeZjtMi\nGMECTRQWFqbs7GxFRERozJgxOn36tOlIgGP17dtXcXFxIXWVHSNYoJlqamo0cuRIderUSa+88krI\n7ZQEGqq0tFSDBg1SWVmZrrjiCtNxbMcIFmimdu3a6e2339bBgwc1efLkkH2pHriUnj17asSIEcrI\nyDAdpUUwggUC5Pjx4xoyZIhuu+02ZWZmyuPxmI4EOM7+/ft1880365NPPtFVV11lOo6tKFgggCoq\nKpSYmKjhw4frmWeeMR0HcKSpU6dKklauXGk4ib0oWCDADh8+rPj4eI0bN05paWmm4wCOU15erl69\neumjjz5S165dTcexDWuwQIB17txZeXl5eumll7Rq1SrTcQDH6dKlix555BEtWLDAdBRbMYIFbLJ/\n/37dcccdmjdvniZOnGg6DuAoX3/9taKjo1VQUKBevXqZjmMLChaw0b59+zR48GBlZGRozJgxpuMA\njrJ06VJ98MEH+v3vf286ii0oWMBmJSUlSk5O1gsvvKCRI0eajgM4RlVVlbp37661a9eqX79+puME\nHAULtIAPP/xQKSkpWr16tYYOHWo6DuAYWVlZysnJ0caNG01HCTg2OQEtoG/fvnrnnXc0btw4FRYW\nmo4DOMbEiRNVVlamLVu2mI4ScBQs0ELi4uL029/+Vvfff78++OAD03EAR2jbtq0WLlyoOXPmBN0p\naBQs0IKSkpL0m9/8RiNGjNCePXtMxwEcYcyYMTp+/Ljee+8901ECijVYwIC33npLjz32mPLz84P2\nFQWgMdauXau5c+dq9+7danXkiJSdLRUVSZWVUlSUFBsrTZggde5sOmqDUbCAIa+++qqefPJJFRQU\nqFu3bqbjAEZZlqWHYmK0MCJC15SU+H7xxIlvfyAiQrIsKSVFSkuT+vc3E7QRKFjAoKysLC1dulSF\nhYW65pprTMcBzMnKUu306VJNjS564aPH4yvbjAxp8uSWStckrU0HAELZ5MmTVVVVpeTkZBUWFgb9\n7SLAeWVlSampCqupufTPWpZUVSWlpvq+dnDJMoIFHODpp5/WmjVr9Mc//lGdOnUyHQdoOTt3SgkJ\nvtJsrMhIqaBAcughFewiBhxg3rx5uvPOO3XnnXeqsrLSdByg5aSnS9XVTftsdbXv8w7FCBZwCMuy\nNGXKFBUVFWnDhg267LLLTEcC7FVeLnXtWn8zU2OFh0uff+7I3cWMYAGH8Hg8ev7553Xddddp5MiR\nOtGc/+gAbpCd3fxneDyBeY4NKFjAQVq1aqUXX3xRHTt21OjRo3Xq1CnTkQD7FBU1b/Qq+aaJi4sD\nkyfAKFjAYcLCwrR69WpZlqWxY8eqtrbWdCTAHoHab1BREZjnBBgFCzhQ27Zt9dZbb+mrr77ST3/6\nU505c8Z0JCBgDh48qFdffVXb6g6UaK4OHQLznACjYAGHCg8PV05OjsrKyvTYY48F3UHoCB3Hjh3T\nu+++q8cee0zXX3+9YmNj9Yc//EFhN92kM+3aNe/hERFSTExgggYYu4gBh6usrFRycrISExO1ZMkS\neTwe05GAizp16pS2b9+uvLw85eXlac+ePbrtttuUnJys5ORk3XTTTQoLCwv6XcQULOACR48eVUJC\ngkaNGqV58+aZjgPUY1mW9u7d6y/UP/3pT7ruuuv8hTpw4EBFRESc/8P33ivl5PhOaGosj0e65x5p\nzZrm/QPYhIIFXOLLL79UfHy8Jk2apJkzZ5qOgxB38OBBf6Hm5eUpPDxcXq/XP9ty5ZVXNuxBQXyS\nEwULuMgXX3yhO+64Q7Nnz9bDDz9sOg5CyLFjx7RlyxZ/of79739XYmKikpOT5fV6m3cj1D/PIm5U\nyUZGOv7Afw77B1zkmmuuUV5enhISEhQZGakHHnjAdCQEqZMnT2rHjh3nXUddvXq1+vTp41tHDYS6\nkkxN9b3XerFxn4tu02EEC7jQ//7v/yoxMVHPP/+87r//ftNxEAQuto7q9XoVFxd34XXUQNm1y3e2\n8Lp1viI9+4ziuvtghw3z3Qfr0Gnhs1GwgEvt3r1bQ4cO1csvv6zhw4ebjgMXOnDggDZv3qzc3Fxt\n3rzZv47q9Xo1ePDghq+jBtrhw77jD4uLfYdIdOjgexVn/HhH7ha+EAoWcLEdO3ZoxIgReuONN5SY\nmGg6DhyusrJSBQUFysvLU25ursrLy5WYmOjfnNSsdVR8BwULuFxBQYFGjRqlnJwc3X777abjwEHq\n1lFzc3OVl5enoqIi3Xbbbf5CDeg6Kr6DggWCwMaNGzVu3Dht2LBBN998s+k4MKRuHbWuUP/0pz8p\nOjra/z5qi6yjwo+CBYJETk6OHn74YeXl5al3796m46CFHDhwoN77qJGRkf4RqtF1VFCwQDB5/fXX\n9fjjj2vLli3q3r276TiwQWVlZb33UcvLy5WUlOQfpbKO6hy8BwsEkZ/85CeqqqpScnKyCgsL1bVr\nV9OR0Exk604TAAAF9UlEQVQnT56sd65vcXGx/33U1157jXVUB2MECwShVatWadWqVSosLNTVV19t\nOg4awbIslZSU1HsflXVUd6JggSCVnp6u1157TVu2bFFnF707GIrOXUe97LLL/IWamJioTp06mY6I\nJqBggSD25JNPav369crPz9cVV1xhOg7+6ex11NzcXB05csR/ri/rqMGDggWCmGVZmj59unbs2KFN\nmzapffv2piOFpIuto3q9XvXp00etWrUyHRMBRsECQc6yLE2aNEl//vOftW7dOtbvWsDF1lG9Xq9u\nv/12/ncIARQsEAJqa2v1wAMPqKKiQu+8847atWtnOlLQqVtHrTvXt24dte5cX9ZRQw8FC4SI06dP\na/To0fJ4PHrzzTfVujVv6TVH3Tpq3alJdeuoXq9XSUlJrKOCggVCSU1NjUaOHKkrr7xSr7zyCut+\njVC3jlpXqMXFxRowYEC9c33594mzUbBAiKmqqtKwYcPUo0cPvfDCC/J4PKYjOVLdOmpdoW7dulU9\nevTw7/RlHRWXQsECIej48ePyer0aMGCAMjMzKdl/+uKLL/wbkzZv3qzLL7/cX6iso6KxKFggRFVU\nVCgxMVF33XWXFi1aZDqOEV9//XW9c32PHDlS71zfa6+91nREuBgFC4Sww4cPKz4+Xg888ICeeOIJ\n03Fsd/LkSf3P//yPv1BLSko0YMAAf6GyjopAomCBEHfw4EHFx8dr6tSpevTRR03HCSjLslRcXOwv\n1HPXUePi4hQeHm46JoIUBQtAf/vb3xQfH6/58+froYceMh2nWc5eR83Ly1P79u3rnevbsWNH0xER\nIihYAJKkffv2afDgwcrIyNCYMWNMx2mws9dRc3NzdfToUdZR4Qi8aQ5AkhQdHa2NGzcqOTlZkZGR\nuvvuu01HOq+amhr/ub65ubnau3evfx31jTfe0I033sg6KhyBESyAej788EOlpKRo9erVGjp06Lff\nKC+XsrOloiKpslKKipJiY6UJEyQbr8M7c+aM/1zf3Nxcbdu2zb+OWneuL+uocCIKFsB3bNu2TSNH\njtSaNWt0R0SElJ4urV/v++aJE9/+YESEZFlSSoqUlib17x+Q379uHbXuXN/27dv7T0waPHgw66hw\nBQoWwHlt3rxZG0aO1JLTpxVWU+Mr0gvxeHxlm5EhTZ7c6N+rbh217tSkr776yr+OmpSUxDoqXIk1\nWADnlbRvn+JPnfKV66VYllRVJaWm+r6+RMnWraPWFWrdOqrX62UdFUGDESyA79q5U0pI8JVmY0VG\nSgUFUr9+/l+qW0etK9Rt27apZ8+e9c71ZR0VwYaCBfBd994r5eRcfFr4Qjwe6Z579Pny5fXO9f3e\n975X71xf1lER7ChYAPWVl0tdu9bfzNRIJzwe9enQQX3+uTEpOTlZP/zhDwOXEXAB1mAB1Jed3exH\ntG3bVp/Mnq1Ws2Y1Pw/gUhQsgPqKipo1epWkVjU1UklJgAIB7sQ2PQD1VVYG5jkVFYF5DuBSFCyA\n+qKiAvOcDh0C8xzApShYAPXFxkrNfWUmIkKKiQlMHsCl2EUMoL4A7CJWeLj0+ee2nlEMOB0jWAD1\ndeniO1vY42na5z0eadgwyhUhjxEsgO8K8ElOQChiBAvgu/r39x3cHxnZuM9FRvo+R7kCvAcL4ALq\nDuxPTZWqq229TQcIRkwRA7i4Xbt898GuW+cr0urqb79Xdx/ssGG++2AZuQJ+FCyAhjl82HeMYnGx\n7xCJDh18r+KMH8+GJuA8KFgAAGzAJicAAGxAwQIAYAMKFgAAG1CwAADYgIIFAMAGFCwAADagYAEA\nsAEFCwCADShYAABsQMECAGADChYAABtQsAAA2ICCBQDABhQsAAA2oGABALABBQsAgA0oWAAAbEDB\nAgBgAwoWAAAbULAAANiAggUAwAYULAAANqBgAQCwAQULAIANKFgAAGxAwQIAYAMKFgAAG1CwAADY\ngIIFAMAGFCwAADagYAEAsAEFCwCADShYAABsQMECAGADChYAABtQsAAA2ICCBQDABhQsAAA2+H8b\nwqq1kD84kwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107516e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = nx.Graph()\n",
    "\n",
    "g.add_edge(\"Hamburgers\", \"Milkshakes\")\n",
    "g.add_edge(\"Hamburgers\", \"French Fries\")\n",
    "g.add_edge(\"Hamburgers\", \"Chicken\")\n",
    "g.add_edge(\"Chicken\", \"Hot Dogs\")\n",
    "g.add_edge(\"Chicken\", \"Chicken Tenders\")\n",
    "g.add_edge(\"Chicken Tenders\", \"French Fries\")\n",
    "\n",
    "nx.draw(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAdgAAAFCCAYAAABSJMy8AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3XtcjufjB/DPU0knRchZZk6lg60QYw7D5Bzm6zxnYUWq\nJVsz5lgpWzY5fZeZbc7Gb86HYXKIopPCl4YpURSd1f374xljHaiep+s5fN6vVy/qvrv75EUf13Vf\nz3XLJEmSQERERAqlIzoAERGRJmLBEhERKQELloiISAlYsERERErAgiUiIlICFiwREZESsGCJiIiU\ngAVLRESkBCxYIiIiJWDBEhERKQELloiISAlYsERERErAgiUiIlICFiwREZESsGCJiIiUgAVLRESk\nBCxYIiIiJWDBEhERKQELloiISAlYsERERErAgiUiIlICFiwREZESsGCJiIiUgAVLRESkBCxYIiIi\nJdATHYBIY6WmAmFhQHQ0kJEBmJkBdnbAxIlA3bqi0xGRkskkSZJEhyDSKBERwLJlwIED8vdzc/85\nZmgISBLg7Az4+gLt24vJSERKx4IlUqQ1awAvLyAnR16kpZHJ5GUbGAjMmFF1+YioynCKmEhRnpdr\ndvbrz5Uk+XleXvL3WbJEGocjWCJFiIgAund/s3L9NyMj4ORJwNFR4bGISByuIiZShGXL5NPCFZGT\nI/98ItIoHMESVVZqKmBp+epipvIyMABu3+bqYiINwhEsUWWFhVX+GjKZYq5DRCqDBUtUWdHRlRu9\nAvJp4pgYxeQhIpXAVcRElZWRoZDLnNi9G0t69UKDBg1Qv379F7++/PuaNWtCJpMp5OtpJG7uQSqE\n92CJKmvsWGDLlkpf5vcmTRD76acwNTVFcnIyUlJSiv2al5dXavm+/KuFhQX09fUV8M2pCW7uQSqI\nBUtUWf7+wIIFlZomzgbwBYCVABwcHODq6opRo0bB2Nj41fOys5GSklJi+b78+9TUVJiZmZU5Gn7+\nq5mZmXqPirm5B6koFixRZaWmorBJE+jm51f4EjkAmgJ4+NLHTE1NMW7cOEyfPh22trblul5hYSHS\n0tJKLOJ/F3JBQUGZo+Hnx+rVq4dq1apV+HtUivJs7vGckRFLlqoEC5aoEv788094eXlh8m+/oU9u\nLnQq8M+pEMAeAMPLOKdz585wdXXF8OHDYWhoWNG4JcrKyio2Ai6pkB88eICaNWu+dnq6fv36MDU1\nfaNR8fLly2FiYlLsmkZGRq8Pzs09SMWxYIkqICcnBwEBAfj666/h7u4On549YdC3b4V+2EtGRji1\naBFWHDuGgwcPoqx/kubm5pgwYQKmTZuG1q1bV+ZbKLfCwkI8fPjwjUbFhYWFpZbwy/eJmzdvjmfP\nnhX7WjVq1ChzNN2gQQO0mjcP1Q8ehKwiP8JkMsDFBdi5UwF/MkQlY8ESlYMkSdizZw/mzp0LBwcH\nrFy5EpaWlvKDCpiuTEpKwvr167FhwwakpqaW+ak9evSAq6srhgwZonILmp4+ffraUfG9e/de+z2W\npi6APwFUaizPzT1I2SQieiPx8fFSr169JGtra+no0aMln/Tdd5JkZCRJMpkkyZfclPwmk8nP++67\nEi+Tl5cnbdu2TerZs6cEoMw3CwsLydfXV7p586YSv3vFi46Ofu33VtqbFyBllfXn+yZvhoaS5O8v\n+o+BNBhHsESvkZGRgYULF2Lz5s34/PPPMXPmzLIX+1y8KH/JyP798qnIl/cofv6SkX795C8ZeYN7\ngImJiVi3bh3CwsKQnp5e6nkymQwffvghXF1d0b9/f+jpqfbL3O/evYv169eXOM1c0rTxy34AME4R\nIcaNA374QRFXIiqGBUtUiqKiImzatAnz589H//79sXTpUlhYWLz5BR48kG96EBMDPHoE1KoF2NoC\nEyZUaFoyNzcXO3bsQGhoKM6cOVPmuY0aNcKUKVMwZcoUNG7cuNxfS6SioiKkp6eXOb38RUQEemRl\nVf6LDRgA7NtX+esQlYAFS1SCiIgIuLm5AQBCQkLQXsU2J4iJicHatWuxefNmZGZmlnqejo4OBg4c\nCFdXV/Tp0wc6OhqyO6qCNvfgCJaUSUP+tREpxv379zF58mQMGjQIrq6uCA8PV7lyBQBbW1usXr0a\n9+7dw4YNG+BYylRzUVERfv31Vzg7O6NFixZYtmwZ7t+/X8VplcDOTr5IqTIMDeUzCkRKwhEsEYCC\nggJ8++23WLJkCcaPH48vvvgCZmZmomOVy6VLl7B27Vps2bIF2WWsZK5WrRpcXFzg6uqK7t27q+cu\nTnxEIKkBFixpvWPHjsHd3R2NGjXC119/DSsrK9GRKiUjIwNbtmxBaGgoYl7zhJ5WrVph+vTp+Pjj\nj1G7du0qSqggQ4cCe/aUvT1iafg6WKoCLFjSWklJSfD09ERkZCSCg4MxePBg9RzNlUKSJJw9exZr\n167F1q1bkZeXV+q51atXx4gRI+Dq6opOnTqpx58Dd3IiFcd7sKR1cnJysHDhQjg4OKBdu3aIj4/H\nkCFD1KNUykEmk6Fz587YtGkT/vrrLwQFBaFVq1YlnpuXl4fNmzfjvffeg729Pb799ltkKOgxfErT\nvr18k4432VbxZc8392C5kpJxBEtaQ5Ik7Nq1C56enujQoQMCAgL+2YVJS0iShJMnTyI0NBS7du1C\nQUFBqefu27cPAwYMqMJ0FcSn6ZCKYsGSVoiLi8Ps2bORkpKCb775Bj179hQdSbj79+/j+++/x9q1\na5GUlPTKMZlMhjFjxmDlypXle+2vKAre3INIEViwpNEeP36MhQsX4scff4Sfnx9mzpyp8jscVbWi\noiIcOXIEoaGh2Lt3L4qKivDBBx8gLi4O9+/fh42NDRYsWIBhw4aJjvp6Ct7cg6gyWLCkkYqKihAW\nFobPPvsMAwYMwNKlS1GXP2Bf6+7du9i4cSOmTp2Khg0bIiIiAt7e3jh9+jSMjY0xevRoLF26FObm\n5qKjEqk8FixpnPPnz8PNzQ26uroICQkpdRMGenO5ublYtGgR1q9fj7S0NLzzzjtYvHgxnJ2dRUcj\nUllcRUwa4/79+5g4cSJcXFwwa9YsnDlzhuWqIAYGBli6dCkePHiA48ePQ19fHwMGDECtWrXg4eGB\np0+fio5IpHJYsKT2CgoKEBwcDBsbG9SpUwcJCQn4+OOPNWffXRXTvXt3nD17FhkZGZgwYQLCwsJg\nZmaGTp064dSpU6LjEakM/gQitXbkyBHY29vj4MGDOH36NAICAmBqaio6llYwMTFBcHAwHj16hH37\n9iE/Px/du3dH3bp1MX/+fORWZhtDIg3Ae7Cklm7dugVPT09cvnwZwcHBGDRokMZtFKGO0tPTMX/+\nfPz000/IyspC165dERAQoJIPTCBSNo5gSa1kZ2djwYIFcHR0xLvvvov4+HiN2+JQnZmbmyM0NBSZ\nmZnYtm0b0tPT0bFjRzRo0ACLFy9+7YPUiTQJC5bUgiRJ2LFjB6ysrJCQkICoqCh8/vnnMKjsI8tI\naYYNG4bo6Gjcu3cPffr0wbJly2BoaIgPP/wQsbGxouMRKR2niEnlxcXFwd3dHampqQgJCUH37t1F\nR6IK+uGHH7B06VJcu3YNjRs3xpw5czBnzhwuSCONxL/VpLIeP36M2bNno3v37nBxcUFUVBTLVc2N\nHz8eCQkJSEpKgpOTE+bPnw8DAwMMHjwY169fFx2PSKFYsKRyioqKsGHDBrRp0wa5ubmIj4/HJ598\nwi0ONUjTpk2xbds2ZGdnIyQkBLGxsWjVqhXefvttrFmzBkVFRaIjElUap4hJpZw7dw5ubm6oVq0a\nQkJC4ODgIDoSVZHr16/Dy8sLBw4cgI6ODgYNGoTAwEA0bdpUdDSiCuEIllRCSkoKJkyYgGHDhsHd\n3R1nzpxhuWqZli1b4tdff0Vubi6WLFmCc+fOoVmzZmjTpg1+/PFH0fGIyo0FS0Ll5+dj5cqVsLGx\ngYWFBRISEjBu3Di+7EaL6ejowNPTE7dv38bly5dhaWmJiRMnwtjYGB9//DFSU1NFRyR6IyxYEubw\n4cOwt7fHkSNHcObMGfj7+6NGjRqiY5EKsbOzw6FDh5CVlQUfHx8cPnwY9evXh52dHXbu3Ck6HlGZ\neA+WqtzNmzcxd+5cxMTEIDg4GAMHDuSIld4YH6FH6oIjWKoy2dnZ+OKLL9ChQwd06NABcXFx3OKQ\nyq19+/b4/fffkZWVhU8++QQ7d+5EnTp14OjoiAMHDoiOR/QCC5aUTpIkbNu2DW3atMG1a9cQFRX1\n4vWPRBX170foVatWDf379+cj9EhlcIqYlComJgbu7u5IS0tDSEgIunXrJjoSabCnT5/Cz88PYWFh\nyMzMRMeOHbF8+XK8//77oqORFuIIlpTi0aNHcHd3xwcffIDhw4cjMjKS5UpK9+9H6OXl5fEReiQM\nC5YUqrCwEOvXr4eVlRXy8/MRHx+PWbNmcRcmqnL9+vXDpUuX8PDhQwwbNgyrV6+GsbExevTogYiI\nCNHxSAtwipgU5uzZs3Bzc4OBgQFCQkLwzjvviI5E9IodO3Zg4cKFiIuLQ7169TBr1izMmzeP/wEk\npWDBUqUlJydj3rx5OHr0KFasWIExY8ZwZTCptJSUFPj4+GD79u0oKChAz549X2x4QqQonCKmCsvP\nz0dgYCBsbW3RoEEDJCQkYOzYsSxXUnn169fHpk2bkJ2djY0bNyIpKQl2dnZo2rQpgoKC+LABUgiO\nYKlCDh06hNmzZ6N58+ZYtWoVWrVqJToSUaXcvn0bXl5e2Lt3L4qKiuDs7IzAwEC0bNlSdDRSUyxY\nKpebN2/Cw8MDcXFxWLVqFfr3788RK2mUoqIirF27FgEBAbh16xaaN2+OTz/9FFOnTuWD4alc+LeF\n3khWVhY+//xztG/fHk5OToiLi8OAAQNYrqRxdHR0MGPGDNy8eRPXrl2DjY0N3NzcYGxsjJEjR+L2\n7duiI5KaYMFSmSRJwtatW2FlZYWbN2/iypUr8PX1RfXq1UVHI1K6lx+ht3jxYpw5c4aP0KM3xili\nKlV0dDTc3d3x+PFjhISEoGvXrqIjEQkXHR0Nb29vHD9+HPr6+hg+fDgCAgJgYWEhOhqpGI5gqZj0\n9HS4ubmhV69e+M9//oOLFy+yXIn+xkfo0ZtiwdILhYWFWLt2LaysrFBYWIirV69ixowZfBE+UQn0\n9fXxxRdfIDk5GWfPnoW5uTlGjBgBU1NTuLq64vHjx6IjkmCcIiYAQHh4ONzc3GBkZIRvvvmGuzAR\nVUBubi4WLVqE9evXIy0tDe+++y6++uorODs7i45GAnAEq+Xu3buHcePGYcSIEfD09MSpU6dYrkQV\nxEfo0ctYsFoqPz8f/v7+sLOzQ+PGjZGQkIDRo0fzZTdECtK9e3ecPXsWmZmZGD9+PMLCwmBmZobO\nnTvj1KlTAIDPPvsM8+fPx61btwSnJWXgFLEWOnDgAObMmYOWLVsiODiYO9UQVZH9+/fDz88PUVFR\nqFWrFp48eYKCggLIZDL07dsXrq6u6NevH9c9aAgWrBa5ceMGPDw8kJCQ8GIXJiKqeunp6Rg0aBDO\nnDlT7Fjjxo0xZcoUTJkyBY0aNRKQjhSFU8Ra4OnTp/jss8/g5OSELl26IDY2luVKJJC5uXmpt2Pu\n3r2LL7/8EpaWlnBxccGhQ4f48AE1xYLVYJIk4eeff4aVlRWSkpJw5coV+Pj4cBcmIhVw4MABrF+/\nHg4ODiUeLywsxJ49e9C3b1+0aNECK1asQGpqahWnpMrgFLGGunLlCtzc3PDkyROEhISgS5cuoiMR\nUSkuXryItWvX4qeffkJ2dnap51WrVg1Dhw6Fq6srunXrxkWJKo4Fq2HS09Ph5+eH7du3Y9GiRZg6\ndSp0dXVFxyKiN5CRkYEff/wRoaGhiI2NLfPc1q1bY/r06fj4449hbm5eRQmpPDhFrCEKCwsRGhoK\nKysrAEBCQgJcXV1ZrkRqxMzMDLNmzUJ0dDTOnDmDcePGlXpLJzExEXPnzkWjRo3w8ccf4+zZs+B4\nSbVwBKsB/vjjD7i5uaFGjRoICQmBvb296EhEpCBpaWnYtGkT1q5di2vXrpV5rq2tLVxdXTF27FiY\nmppWUUIqDQtWjf3111/w8fHB77//joCAAIwcOZL3ZIg0lCRJ+P333xEaGopdu3bh2bNnpZ5rbGyM\n0aNHY/r06aUuoiLlY8Gqoby8PKxatQoBAQGYNm0a5s+fDxMTE9GxiKiKpKSk4Pvvv8e6deuQlJRU\n5rmOjo5wdXXFyJEjYWxsXDUBCQALVu3s378fc+bMQevWrREcHIwWLVqIjkREghQVFeHw4cMIDQ3F\nvn37yny9rKmpKcaPH4/p06fDxsbmzb9IaioQFgZERwMZGYCZGWBnB0ycCNStW/lvQoOxYFVYUlIS\nnj59ChsbG9y4cQNz5szBtWvXsGrVKvTr1090PCJSIXfv3sWGDRuwYcMG/PXXX2We26VLF0yfPh3D\nhw+HgYFBySdFRADLlgEHDsjfz83955ihISBJgLMz4OsLtG+voO9Cs7BgVVBOTg5WrFiBFStWwMrK\nCr1798bGjRvx6aefYs6cOdDX1xcdkYhU1LNnz/Dbb78hNDQUhw4dKnNlsbm5OSZOnIhp06ahVatW\n/xxYswbw8gJycuRFWhqZTF62gYHAjBkK/C40AwtWhUiShF27dsHT0xN//vnni4937NgRu3btQsOG\nDQWmIyJ1c/PmTaxfvx7//e9/X7sLVM+ePeHq6gqX+/eh5+MDlLHhRTFGRizZErBgVURcXBxmz56N\nY8eOFTtWp04dXL9+HTVr1hSQjIjUXX5+Pvbs2YPQ0FCcOHGi1PMcAZwEYFSRL2JkBJw8CTg6VjCl\n5uFGE4I9fvwYHh4esLe3L7FcLSws4O/vz9e0EVGF6evrY8SIETh+/DiuXr0KDw8P1KpVq9h5vgAq\nvFN5To78ni29wBGsIEVFRfj+++/h6+uLBw8eFDuuq6sLd3d3LFiwAGZmZgISEpEmy8nJwY4dOxAa\nGorw8HDUBfAnAMPKXNTAALh9m6uL/8aCFeD8+fNwc3NDREREicc/+OADfPPNN7C2tq7iZESkjWJi\nYnBj+nT0PXu2cgVraAgsXAh4eysqmlrjFHEVun//PiZOnAgnJ6cSy9XS0hI7d+7EkSNHWK5EVGVs\nbW3h0rx55coVkE8Tx8QoIpJG0BMdQBsUFBQgJCQECxcuRGZmZrHjBgYG8PX1hbe3NwwNK/1XnIio\n/DIyFHOdR48Ucx0NwIJVsiNHjsDd3R0JCQklHh82bBhWrlwJS0vLKk5GRPQSRa31KGHxlLbiFLGS\n3Lp1C0OHDkWfPn1KLFdra2scPXoUO3bsYLkSkXh2dvJFSpVhaAjY2iomjwbgIicFy87OxvLly+Hv\n74+8vLxix83MzLBw4ULMnDkT1apVE5CQiKgEqakoatoUOiX83HpjXEX8Ck4RK4gkSdixYwc8PT1x\n586dYsdlMhkmTZqEpUuXwsLCQkBCIqKSZWRkYHFAALoVFaGfTAadioy7ZDKgXz+W60s4RawAsbGx\n+OCDDzBixIgSy7Vjx444f/48NmzYwHIlIpXx7NkzhIaGonXr1nj06BGc9u6FTkUXWhoayjf+pxc4\ngq2ER48e4csvv8S3336LwsLCYsfr1auHFStWYNy4cdDR4f9liEh1HD58GHPnzkXdunVx8OBBtGvX\nTn4gMFC+0X9F9iLmNomvYMEC5X7eYWFh4YtdmB4+fFjsuJ6eHmbPng0/Pz/uwkREKiUhIQFeXl5I\nSEhAYGAgBg8eDJlM9s8Jzzfs59N0Kk/SZhcuSJKLiyQZGMjf5H+V5G+GhvKPubjIz/tbeHi45ODg\nIAEo8a13795SfHy8wG+KiKi4tLQ0yd3dXapTp44UGBgo5ebmlv0JERGSNHSo/OegoeErPx8L9PXl\nHx86VH4elUh7VxGX83mHGV98Aff4ePzwww8lntasWTMEBwcX/98gEZFABQUFWLNmDRYvXozhw4dj\n4cKFqFuehUgPHshn+GJigEePcPF//0Nms2bouWkTFzS9hnZOET8v1ze5xyBJQHY29ObNK3EbMUND\nQ/j6+sLLy4u7MBGRypAkCfv374enpycsLS1x/Phx2NjYlP9Cdeu+srdwbFgYjh49ip4s19fSvhFs\nRATQvXv5buD/LQtANwCX/n7/o48+QmBgIJo2barAgERElRMbG4u5c+fi9u3bCAoKgrOzs8Jm1i5e\nvIipU6ciKipKIdfTZNq3tHXZMvm0cAUYQP68RBsbGxw/fhzbtm1juRKRynjw4AFmzJiBnj17YuDA\ngYiJiUG/fv0UetvKysoKiYmJePbsmcKuqam0q2BTU4EDB8q+51oGXQCD9fQQdfgwevToodhsREQV\nlJeXh8DAQFhbW6N69epISEiAm5ubUnaLMzY2RoMGDfC///1P4dfWNNpVsGFhlb6EXrVq0Pvxx8pn\nISKqJEmSsHv3brRt2xYnT57EH3/8gVWrVsHc3FypX7dt27aIi4tT6tfQBNq1yCk6GsjNrdw1+LxD\nIlIBUVFRmDt3Lh4+fIg1a9agd+/eVfa1bWxsEBsbi6FDh1bZ11RH2jWC5fMOiUjNJScnY/LkyXB2\ndsbIkSMRFRVVpeUKyAuWI9jX066C5fMOiUhN5eTkYOnSpbC1tUXt2rWRmJiI6dOnQ0+v6ici27Zt\ni9jY2Cr/uupGuwqWzzskIjUjSRK2bt0KKysrXLp0CefPn4e/v7/QbVhbt26NmzdvIj8/X1gGdaBd\nr4NNTQUsLSt3H5bPOySiKnLhwgV4eHggJycHwcHB6Natm+hIL7Rp0wY7duyo2OYVWkK7RrAWFoCz\ns3z7wwqQ+LxDIqoCd+/exbhx4zBkyBBMmTIFERERKlWuwD8Lnah02lWwgPx5hRXc0jBHkrDt7bdR\nVFSk4FBEREBWVha+/PJL2Nvbw9LSEomJiZg4cSJ0dXVFRyuGC51eT/sKtn17+aOVjIzK93lGRsj4\n4gt8Ex6O999/H4mJicrJR0Rap6ioCJs3b0abNm2QmJiIyMhILF68GDVq1BAdrVRc6PR62lewgPy5\nhc9L9nXTxTLZi4cJN1i4EKdOncLIkSPRpUsXLF++HAUFBVWTmYg00pkzZ+Dk5ITVq1dj69at+Pnn\nn2FpaSk61mtxivj1tGuR079dvCjfm3j/fnmRvrxHsaGhfEvFfv3k08qOjq98alJSEqZNm4aHDx/i\nv//9L9q1a1fF4YlInSUlJcHHxwfh4eFYvnw5Ro0aBR0d9RnzFBQUwNTUFOnp6XySWCm0u2Cf+9fz\nDlGrlvylOBMmlLmgSZIkbNq0CZ9++immTp0KPz8/GFT2ZUBEpNGePHmCZcuWYe3atZg9eza8vLxg\nVN5bVirCzs4OYWFhePfdd0VHUUksWAVISUnBrFmzEB8fj40bN6Jz586iIxGRiiksLERYWBj8/PzQ\nu3dvLF26FI0aNRIdq1JGjx6Nvn37Yvz48aKjqCTt2otYSerXr4+dO3di586dGD58OD766CMsWbIE\nJiYmoqMRkQr4/fff4eHhAWNjY/z6669o37696EgKwU3/y6Y+E/5qYNiwYYiNjUVGRgZsbW1x5MgR\n0ZGISKAbN27AxcUFEydOhK+vL06fPq0x5QpwodPrsGAVzNzcHGFhYVizZg2mTJmCSZMm4REfDkCk\nVTIyMuDt7Q0nJyd07NgRV69exYgRIxT64HNVwBFs2ViwStK3b1/ExsbCyMgINjY22L17t+hIRKRk\nz549w5o1a9C6dWs8fvwYsbGxmDdvnsYufnzrrbfw4MEDZGZmio6ikliwSlSjRg2sXr0av/zyC3x8\nfDBixAjcv39fdCwiUoLDhw+jXbt22L59Ow4ePIj169ejfv36omMpla6uLqysrBAfHy86ikpiwVaB\nrl274sqVK3j77bdhZ2eHzZs3g4u3iTRDQkICBgwYgFmzZmHJkiU4duyYVr0untPEpWPBVhFDQ0Ms\nW7YM+/fvx8qVK9G/f3/cvn1bdCwiqqC0tDS4u7uja9eu6NGjB2JjYzF48GCNu8/6OlzoVDoWbBVz\ncHBAREQE3nvvPTg4OOC7777jwwOI1EhBQQG++eYbWFlZobCwEPHx8fD09ET16tVFRxOCI9jScaMJ\nga5evYrJkydDT08PGzZsQKtWrURHIqJSSJKE3377DV5eXrC0tERQUBDatm0rOpZwt2/fhpOTE+7d\nuyc6isrhCFYgKysrnD59GsOGDUPnzp3h7++PZ8+eiY5FRP8SGxuLDz/8EN7e3ggKCsLBgwdZrn9r\n0qQJnj59ivT0dNFRVA4LVjBdXV3Mnj0bEREROHLkCJycnHDlyhXRsYgIwIMHDzBjxgz07NkTgwYN\nQnR0NPr166d191nLIpPJOE1cChasinjrrbdw+PBhzJw5E71794afnx/y8vJExyLSSnl5eQgICIC1\ntTUMDAyQkJCATz75BNWqVRMdTSVxoVPJWLAqRCaTYdKkSbh8+TJiYmLwzjvv4Ny5c6JjEWkNSZKw\ne/duWFtb4/Tp0/jjjz8QHBwMc3Nz0dFUGkewJeNm/yqoYcOG2L17N3bs2AEXFxeMHDkSixcvhrGx\nsehoRBorKioKHh4eSEtLw9q1a9GrVy/RkdSGjY0N9uzZIzqGyuEIVkXJZDJ89NFHiI2NxcOHD2Fr\na4tjx46JjkWkcZKTkzFp0iQ4Oztj1KhRiIqKYrmW0/MpYr4o5VUsWBVXu3ZtbN68GatXr8bEiRMx\nZcoUPH78WHQsIrWXk5ODpUuXwtbWFnXr1kViYiKmT58OPT1O7JVXvXr1IEkSUlNTRUdRKSxYNdGv\nXz/ExsZCX18fNjY2+PXXX0VHIlJLkiThl19+gZWVFSIjI3H+/HmsWLECZmZmoqOpLZlMxoVOJeBG\nE2ro5MmTmDJlChwcHPDNN9/AwsJCdCQitXDhwgV4eHggJycHwcHB6Natm+hIGmPmzJlo06YN3N3d\nRUdRGRzBqqFu3bohOjoalpaWsLOzw5YtW3jvg6gMd+/exbhx4+Di4oKpU6fi4sWLLFcF4wi2OBas\nmjI0NMQ7XhtZAAAV4klEQVSKFSvwf//3f1ixYgUGDhyIO3fuiI5FpFKysrKwYMEC2Nvbw9LSEomJ\niZgwYQJ0dPijT9FYsMXxb5mac3R0xMWLF9GxY0e8++67CA0N5cMDSOsVFRVh8+bNaN26Na5fv46o\nqCgsXrwYJiYmoqNprOevheVs2j94D1aDxMXFYfLkyTAwMMD69evRsmVL0ZGIqtyZM2cwZ84c6Orq\nIjg4GJ06dRIdSWs0aNAAFy5cQJMmTURHUQkcwWqQtm3b4syZMxg8eDA6deqEwMBAPjyAtEZSUhL+\n85//YNSoUZgzZw7Cw8NZrlWsbdu2nCZ+CQtWw+jq6sLDwwMXLlzAgQMH0LlzZ8TExIiORaQ0T548\nwfz58+Hg4AAbGxskJCRgzJgxvM8qgI2NDbdMfAn/Bmqo5s2b4+jRo5g2bRp69uyJBQsW8OEBpFEK\nCwuxYcMGtG7dGvfu3UN0dDT8/PxgZGQkOprW4kKnV7FgNZhMJsOUKVNw+fJlREVFwcHBAefPnxcd\ni6jSTpw4AQcHB2zatAl79+5FWFgYGjVqJDqW1uOm/6/iIictIUkStm7dijlz5mDMmDH46quv+D99\nUjs3btyAt7c3Ll++DH9/fwwfPpzPZlUhmZmZaNCgAZ48ecIpenAEqzVkMhlGjhyJ2NhYpKSkwNbW\nFidOnBAdi+iNPH78GF5eXnByckLHjh1x9epVfPTRRyxXFWNqaoratWvj1q1boqOoBBaslqlTpw62\nbNmCr7/+GuPHj8f06dORkZEhOhZRiZ49e4Y1a9agTZs2yMzMRFxcHObNmwcDAwPR0agUXOj0Dxas\nlhowYABiY2NfbNK9b98+0ZGIXnHo0CG0a9cO27dvx6FDh7Bu3TrUq1dPdCx6DS50+gcLVouZmZkh\nNDQUP/zwAzw8PDB69Gg8ePBAdCzScgkJCejfvz8++eQTLFmyBMeOHYO9vb3oWPSGuNDpHyxYQo8e\nPRAdHY2GDRvC1tYWP//8M7c7oyqXlpYGd3d3dO3aFb169UJcXBwGDx7M+6xqhiPYf3AVMb3iwoUL\nmDx5Mpo1a4Y1a9agcePGoiORhisoKMB3332HJUuW4KOPPsLChQtRp04d0bGogrKzs1G7dm08efJE\n6x9ezxEsvaJDhw64dOkSHBwc8M4772DdunUczZJSSJKE//u//4ONjQ0OHDiA33//Hd9++y3LVc0Z\nGRmhUaNGuHHjhugownEES6WKiYnB5MmTYWJigvXr1+Ptt98WHYk0RExMDObOnYu//voLK1euhLOz\ns+hIpEBDhgzB2LFjMXz4cNFRhOIIlkpla2uLs2fPon///ujYsSOCgoJQWFgoOhapsdTUVLi6uqJX\nr14YPHgwrly5wnLVQFzoJMeCpTLp6urC09MT586dw759+9C5c2cuYKByy8vLQ0BAAKytrWFkZISE\nhAR88sknqFatmuhopARc6CTHgqU30qJFCxw7dgyTJ09Gjx49sHDhQuTn54uORSpOkiTs2rUL1tbW\nOH36NMLDwxEUFIRatWqJjkZKxIKV4z1YKre7d+/C1dUVf/75J/773/+iffv2oiORCoqMjMTcuXOR\nnp6O4OBgfPDBB6IjURXJy8tDzZo18fjxY1SvXl10HGE4gqVya9y4Mfbt2wdfX18MHDgQ3t7eyM7O\nFh2LVERycjImTZqE/v37Y/To0YiKimK5apnq1avjrbfeQmJiougoQrFgqUJkMhlGjx6N6Oho3L17\nF/b29jh58qToWCRQTk4OlixZAltbW9StWxcJCQmYNm0adHV1RUcjAbjQiQVLlWRhYYGff/4ZK1eu\nxJgxYzBjxgxkZmaKjkVVSJIk/PLLL2jTpg0uX76MCxcuYMWKFTAzMxMdjQTifVgWLCnIoEGDEBsb\ni8LCQtjY2OC3334THYmqwPnz5/Hee+8hICAAmzdvxvbt29G8eXPRsUgFsGBZsKRANWvWxLp16xAW\nFgZ3d3eMHTsWDx8+FB2LlODOnTsYO3Yshg4dimnTpiEiIgLvv/++6FikQjhFzIIlJejZsyeio6Nh\nYWEBW1tbbN26ldstaoisrCwsWLAA7dq1e7GIZcKECdDR4Y8SelWLFi3w119/afUCSP6rIKUwNjZG\nUFAQdu/ejUWLFmHIkCG4d++e6FhUQUVFRfjhhx/QunVrXL9+HVFRUfjqq69gYmIiOhqpKD09PbRq\n1QpXr14VHUUYFiwplZOTEyIjI2Fvb4927dph48aNHM2qmT/++AMdO3bEd999h+3bt+Onn35C06ZN\nRcciNaDt92FZsKR01atXx6JFi3D06FGsWbMGvXr1ws2bN0XHote4desWRowYgdGjR8PDwwPh4eHo\n1KmT6FikRliwRFXEzs4O586dQ9++fdGhQwesWrWKDw9QQZmZmfD19UX79u1ha2uLhIQEjB49mvdZ\nqdy0faET/8VQldLT04O3tzfCw8Oxe/dudOnSBfHx8aJjEYDCwkJs2LABbdq0QXJyMqKjo+Hn5wcj\nIyPR0UhNcQRLJECrVq1w4sQJjB8/Hu+//z6++uorFBQUiI6ltU6cOAEHBwds2rQJe/fuRVhYGBo2\nbCg6Fqm5Zs2aIS0tDRkZGaKjCMGCJWF0dHQwY8YMREZG4uzZs3B0dMSlS5dEx9J4jx49evH769ev\nY8iQIZg0aRI+//xznDp1Co6OjgLTkSbR0dGBtbW11s5SsWBJuKZNm+K3336Dt7c3+vXrBx8fH+Tk\n5IiOpXHS0tLg5uaGpk2bIjo6Gp6enujUqRM6deqEq1evYvjw4ZDJZKJjkobR5mliFiypBJlMhrFj\nxyI6OhpJSUmwt7fHqVOnRMfSCPn5+Vi1ahVatGiB1atX4+nTp+jQoQOePHmCuLg4+Pj4wMDAQHRM\n0lDavNCJBUsqpV69eti6dSv8/f0xatQozJo1iw8PqCBJkrBv3z7Y2trCw8MDjx8/fnEsLy8PEyZM\nQL169QQmJG3AESyRihkyZAhiY2ORm5sLW1tbHDhw4MWxoqIigcnUQ0xMDPr06YNBgwbh2rVrxY43\na9aM0/BUJdq2bcuCJVI1tWrVwsaNG7Fx40bMnDkT48ePR0pKCt577z0sX74cz549Ex1R5aSmpsLV\n1RXt2rXD0aNHix2vUaMGli9fjqtXr/Ih6FQlGjdujJycHK188AcLllRer169EBMTA3Nzc7Rs2RLn\nzp2Dr68vOnbsiMuXL4uOpxLy8vLg7++Pli1bYu3atcVG+To6Opg6dSquX7/Oe65UpWQyGWxsbLTy\nPiwLltSCiYkJpk+fjry8vBcfi4yMhKOjIz777DPk5uYKTCeOJEnYuXMnrK2t4ePjU+L96p49eyIy\nMhLr1q3jPVcSQlsXOrFgSW3cuXMHpqamr3yssLAQS5cuxTvvvIPw8HBBycSIjIxE9+7dMXz48BL3\ndm7ZsiV+/fVXHD16FPb29gISEslp60InFiypjT59+uDq1asYOXJksWMJCQno0qULZs+ejadPnwpI\nV3WSk5MxadIkODo6lvhSJjMzMwQFBSE2NhaDBg3ia1tJOG1d6CST+OwwUkN79+7FjBkzSnzGbLNm\nzbBu3Tr07t1bQDLlycnJQVBQEJYtW4asrKxix3V1deHq6oovv/wSderUEZCQqGT379+HtbU1Hj58\nqFX/4eMIltTSoEGDEBcXh6lTpxY7lpSUhD59+mDSpEmvbAuoriRJwi+//II2bdrg888/L7Fc+/bt\ni+joaKxevZrlSirHwsICOjo6SElJER2lSrFgSW3VrFkT69atw7Fjx9C8efNix7///ntYW1tj9+7d\nAtIpxvnz5/Hee+9h1KhRuH37drHjVlZW2L9/Pw4cOABra2sBCYleTyaTaeVCJxYsqb2ePXsiOjoa\nHh4exaafUlJSMHToUIwYMQL3798XlLD87ty5g7Fjx8LJyQlnz54tdrx27dpYvXo1rly5AmdnZwEJ\nicpHGxc6sWBJIxgbGyMoKAjh4eEljuS2b98Oa2trbN68Gaq87CArKwsLFixA69atsWXLlmLH9fT0\n4OHhgevXr2PWrFmoVq2agJRE5aeNC51YsKRRnJycEBkZCT8/P+jp6b1yLD09HePHj0f//v1LnG4V\nqaioCJs2bUKrVq2waNGiErcxfH7fOSgoCLVq1RKQkqjitHGzCa4iJo0VHR2NSZMmlfiMWRMTE6xY\nsQKurq7Q0RH7/8w//vgDHh4euHjxYonH7ezsEBQUxK0NSa2lp6ejWbNmyMjI0JqVxBzBksays7PD\nuXPn4O/vX2xrwKdPn2LWrFno3r17iZvhV4Vbt25hxIgR6Nq1a4nlamFhgXXr1iEyMpLlSmrP3Nwc\nJiYmuHPnjugoVYYFSxpNT08P3t7eiI6Oxvvvv1/s+OnTp2Fvbw9/f/8qe3hAZmYmfH19YWVlhe3b\ntxc7rq+vDx8fH1y/fh1Tp06Frq5uleQiUjZtW+jEgiWt0LJlS5w4cQJr1qxBjRo1XjmWm5sLHx8f\nODk54cqVK0rLUFhYiA0bNqBly5ZYvnz5K/sqPzd8+HBcvXoVy5cvL7YtJJG607aFTixY0ho6Ojpw\ndXVFXFxciS9tuXTpEhwdHeHn51di+QEAUlMBf39g7Fhg4ED5r/7+wIMHZX7t48ePw8HBAVOnTkVq\namqx4w4ODjh16hS2b99e4mt6iTSB1i10koi0UFFRkbR582bJ3NxcAlDszcrKSjp79uw/n3DhgiS5\nuEiSgYH8DfjnzdBQ/jEXF/l5L7l27Zo0ePDgEr8GAKlBgwZSWFiYVFhYWMV/AkRV79y5c9K7774r\nOkaV4Spi0mqpqalwc3PDtm3bih2TyWSYPXs2ljdrhurz5wM5OfJKLY1MBhgaAoGBeDxqFL766iuE\nhISgoKCg2KkGBgbw9vbGp59+ChMTE0V+S0Qq68mTJ6hfvz4yMzO1Ym0BC5YIwJ49ezBz5kwkJye/\n8vHpAIJkMhiV459Jgb4+fPX0sDI7u8TjY8aMwbJly9CkSZPKRCZSS82aNcPRo0fRokUL0VGUjvdg\niQAMGTIEcXFxmDx58ouPOQJYCZSrXAGgWn4+FmZnw+FfH3dycsK5c+fw448/slxJa2nTQicWLNHf\natWqhQ0bNuDIkSNo1qwZfAEYvPazSmYAwPfv3zdp0gQ//fQTwsPD0bFjR8WEJVJT2rTQiQVL9C+9\nevVC7PHjGKiri4reJdIF0B/AynnzkJiYiFGjRmnN7jVEZdGm18KyYIlKYLx9e6U30tc3MMBcc3MY\nGhoqKBWR+uMUMZG2i44GcnMrdQmd3FwgJkZBgYg0g5WVFW7cuFHi6npNw4IlKklGhmKu8+iRYq5D\npCEMDQ3RuHFjXL9+XXQUpWPBEpXEzEwx1+Fj5YiK0ZaFTixYopLY2QEGFV1D/DdDQ8DWVjF5iDSI\ntix0YsESlWTChMpfQ5IUcx0iDaMtC51YsEQlsbAAnJ3l2x9WhEwG9OsH1K2r2FxEGkBbpoi5VSJR\naSIigO7dgVK2PCyTkRFw8iTg6KjwWETqLj8/H6ampnj8+DEMKnsrRoVxBEtUmvbtgcBAeVmWh5GR\n/PNYrkQl0tfXx9tvv43ExETRUZSKBUtUlhkz/inZ100Xy2T/lOuMGVWTj0hNacNCJxYs0evMmCGf\n7nVxka8s/vfOTIaG8o+7uMjPY7kSvZY2LHTSEx2ASC04OgI7dwIPHgBhYfIdmh49kr/O1dZWvlqY\nC5qI3piNjQ3CwsJEx1AqLnIiIqIql5iYCGdnZ9y8eVN0FKVhwRIRUZV79uwZTE1N8eDBAxgbG4uO\noxS8B0tERFVOT08PrVu3Rnx8vOgoSsOCJSIiITR9oRMLloiIhND0HZ1YsEREJARHsERERErAESwR\nEZGCXbt2Db/88guSk5NhZ2cHT09P0ZEUjhtNEBFRlYuPj8f8+fMBADExMTA3NxecSPE4giUioipn\nY2PzyvuxsbHQtG0ZuNEEERFVucLCQtSoUQM5OTkvPpaSkoJ69eoJTKVYHMESEVGV09XVhZWV1Ssf\n07QVxSxYIiIS4t/TxJq2opgFS0REQpR0H1aTsGCJiEiItm3bvvI+C5aIiEgBSpoi1qR1tyxYIiIS\nokmTJqhRo8aL9zMzM3H37l2BiRSLBUtERELIZLJi08SatNCJBUtERMJo8kInFiwREQmjyQudWLBE\nRCSMJr8WllslEhGRMMnJyWjYsOGL942MjPDkyRPo6Kj/+E/9vwMiIlJb9evXf+VJOtnZ2UhKShIX\nSIFYsEREJIxMJtPYhU4sWCIiEkpTFzqxYImISChNXejEgiUiIqE0dYqYq4iJiEiotLQ01KlT58X7\n+vr6yMrKgp6ensBUlccRLBERCVW7dm3Ur1//xfv5+fm4ceOGwESKwYIlIiLhNHGhEwuWiIiE08SF\nTixYIiISThMXOrFgiYhIOE18bB1XERMRkXCZmZkwMzN78b6uri6ysrJQvXp1gakqhyNYIiISztTU\nFE2bNn3xfmFhIRITEwUmqjwWLBERqQRNmyZmwRIRkUrQtIVOLFgiIlIJHMESEREpgaaNYLmKmIiI\nVEJ2djZMTEzwvJZkMhmePn0KIyMjwckqRr13UiYiIo1hZGSE5s2bI/N//8PHAOwkCfl9+8KoaVPA\nzg6YOBGoW1d0zDfGESwREamGiAicGzwY9snJkAC8Mm41NAQkCXB2Bnx9gfbtBYV8cyxYIiISb80a\nwMsLRdnZZS8OksnkZRsYCMyYUVXpKoQFS0REYv1drsjOfvPPMTJS+ZJlwRIRkTgREUD37uUr1+eM\njICTJwFHR4XHUgS+TIeIiMRZtgzIyanY5+bkyD9fRXEES0REYqSmApaWQG5uxa9hYADcvq2Sq4s5\ngiUiIjHCwip/DZlMMddRAhYsERGJER1dudErIJ8mjolRTB4FY8ESEZEYGRmKuc6jR4q5joKxYImI\nSIyXHrBeKbVqKeY6CsaCJSIiMezs5IuUKsPQELC1VUweBeMqYiIiEoOriImIiJTAwkK+t7BMVrHP\nl8mAfv1UslwBjmCJiEgk7uRERESkBO3by/cULu8zX5/vRayi5QrwebBERCTa8w37vbzkr2sta2KV\nT9MhIiIqp4sX5XsL798vL9KX9yh+/jzYfv3kz4NV4ZHrcyxYIiJSLQ8eyLc/jImRbyJRq5b8pTgT\nJqjsgqaSsGCJiIiUgIuciIiIlIAFS0REpAQsWCIiIiVgwRIRESkBC5aIiEgJWLBERERKwIIlIiJS\nAhYsERGRErBgiYiIlIAFS0REpAQsWCIiIiVgwRIRESkBC5aIiEgJWLBERERKwIIlIiJSAhYsERGR\nErBgiYiIlIAFS0REpAQsWCIiIiVgwRIRESkBC5aIiEgJWLBERERKwIIlIiJSAhYsERGRErBgiYiI\nlIAFS0REpAQsWCIiIiVgwRIRESkBC5aIiEgJWLBERERKwIIlIiJSAhYsERGRErBgiYiIlIAFS0RE\npAQsWCIiIiVgwRIRESkBC5aIiEgJWLBERERK8P+cuIvnd/Q8HwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10820aba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = nx.DiGraph()\n",
    "\n",
    "g.add_edge(\"Hamburgers\", \"Milkshakes\")\n",
    "g.add_edge(\"Hamburgers\", \"French Fries\")\n",
    "g.add_edge(\"Hamburgers\", \"Chicken\")\n",
    "g.add_edge(\"Chicken\", \"Hamburgers\")\n",
    "g.add_edge(\"Chicken\", \"Hot Dogs\")\n",
    "g.add_edge(\"Chicken\", \"Chicken Tenders\")\n",
    "g.add_edge(\"Chicken Tenders\", \"French Fries\")\n",
    "\n",
    "nx.draw(g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dot products\n",
    "\n",
    "First we'll start off with an **adjacency matrix**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Baseball</th>\n",
       "      <th>Football</th>\n",
       "      <th>Hockey</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Dooru</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dida</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dreebo</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Darby</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drabski</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doeri</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Baseball  Football  Hockey  Tennis\n",
       "name                                       \n",
       "Dooru           1         1       1       0\n",
       "Dida            0         0       1       0\n",
       "Dreebo          1         1       0       0\n",
       "Darby           1         1       1       0\n",
       "Drabski         1         0       1       0\n",
       "Doeri           0         0       0       1"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame([\n",
    "    { 'name': 'Dooru', 'Football': 1, 'Hockey': 1, 'Baseball': 1, 'Tennis': 0 },\n",
    "    { 'name': 'Dida', 'Football': 0, 'Hockey': 1, 'Baseball': 0, 'Tennis': 0 },\n",
    "    { 'name': 'Dreebo', 'Football': 1, 'Hockey': 0, 'Baseball': 1, 'Tennis': 0 },\n",
    "    { 'name': 'Darby', 'Football': 1, 'Hockey': 1, 'Baseball': 1, 'Tennis': 0 },\n",
    "    { 'name': 'Drabski', 'Football': 0, 'Hockey': 1, 'Baseball': 1, 'Tennis': 0 },\n",
    "    { 'name': 'Doeri', 'Football': 0, 'Hockey': 0, 'Baseball': 0, 'Tennis': 1 }\n",
    "])\n",
    "df.set_index('name', inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What's connected to what?\n",
    "\n",
    "How about cosine similarity?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.        ,  0.57735027,  0.81649658,  1.        ,  0.81649658,\n",
       "         0.        ],\n",
       "       [ 0.57735027,  1.        ,  0.        ,  0.57735027,  0.70710678,\n",
       "         0.        ],\n",
       "       [ 0.81649658,  0.        ,  1.        ,  0.81649658,  0.5       ,\n",
       "         0.        ],\n",
       "       [ 1.        ,  0.57735027,  0.81649658,  1.        ,  0.81649658,\n",
       "         0.        ],\n",
       "       [ 0.81649658,  0.70710678,  0.5       ,  0.81649658,  1.        ,\n",
       "         0.        ],\n",
       "       [ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ]])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cosine_similarity(df.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>name</th>\n",
       "      <th>Dooru</th>\n",
       "      <th>Dida</th>\n",
       "      <th>Dreebo</th>\n",
       "      <th>Darby</th>\n",
       "      <th>Drabski</th>\n",
       "      <th>Doeri</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Dooru</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.577350</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dida</th>\n",
       "      <td>0.577350</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.577350</td>\n",
       "      <td>0.707107</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dreebo</th>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Darby</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.577350</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drabski</th>\n",
       "      <td>0.816497</td>\n",
       "      <td>0.707107</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.816497</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doeri</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "name        Dooru      Dida    Dreebo     Darby   Drabski  Doeri\n",
       "name                                                            \n",
       "Dooru    1.000000  0.577350  0.816497  1.000000  0.816497    0.0\n",
       "Dida     0.577350  1.000000  0.000000  0.577350  0.707107    0.0\n",
       "Dreebo   0.816497  0.000000  1.000000  0.816497  0.500000    0.0\n",
       "Darby    1.000000  0.577350  0.816497  1.000000  0.816497    0.0\n",
       "Drabski  0.816497  0.707107  0.500000  0.816497  1.000000    0.0\n",
       "Doeri    0.000000  0.000000  0.000000  0.000000  0.000000    1.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "similarity = cosine_similarity(df.values)\n",
    "similarity_df = pd.DataFrame(similarity, columns=df.index, index=df.index)\n",
    "similarity_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x109c45940>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x109c3f0b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.heatmap(similarity_df, cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### But we can do better!\n",
    "\n",
    "Those numbers **don't mean anything**. We want a count of what's connected to what!\n",
    "\n",
    "Let's talk about **dot products**! Or better yet, let's not talk about them, let's just do them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Baseball</th>\n",
       "      <th>Football</th>\n",
       "      <th>Hockey</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Dooru</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dida</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dreebo</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Darby</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drabski</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doeri</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Baseball  Football  Hockey  Tennis\n",
       "name                                       \n",
       "Dooru           1         1       1       0\n",
       "Dida            0         0       1       0\n",
       "Dreebo          1         1       0       0\n",
       "Darby           1         1       1       0\n",
       "Drabski         1         0       1       0\n",
       "Doeri           0         0       0       1"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>name</th>\n",
       "      <th>Dooru</th>\n",
       "      <th>Dida</th>\n",
       "      <th>Dreebo</th>\n",
       "      <th>Darby</th>\n",
       "      <th>Drabski</th>\n",
       "      <th>Doeri</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Baseball</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Football</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hockey</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tennis</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "name      Dooru  Dida  Dreebo  Darby  Drabski  Doeri\n",
       "Baseball      1     0       1      1        1      0\n",
       "Football      1     0       1      1        0      0\n",
       "Hockey        1     1       0      1        1      0\n",
       "Tennis        0     0       0      0        0      1"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transpose our dataframe\n",
    "df.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>name</th>\n",
       "      <th>Dooru</th>\n",
       "      <th>Dida</th>\n",
       "      <th>Dreebo</th>\n",
       "      <th>Darby</th>\n",
       "      <th>Drabski</th>\n",
       "      <th>Doeri</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Dooru</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dida</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dreebo</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Darby</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drabski</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doeri</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "name     Dooru  Dida  Dreebo  Darby  Drabski  Doeri\n",
       "name                                               \n",
       "Dooru        3     1       2      3        2      0\n",
       "Dida         1     1       0      1        1      0\n",
       "Dreebo       2     0       2      2        1      0\n",
       "Darby        3     1       2      3        2      0\n",
       "Drabski      2     1       1      2        2      0\n",
       "Doeri        0     0       0      0        0      1"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dot(df.T)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>name</th>\n",
       "      <th>Dooru</th>\n",
       "      <th>Dida</th>\n",
       "      <th>Dreebo</th>\n",
       "      <th>Darby</th>\n",
       "      <th>Drabski</th>\n",
       "      <th>Doeri</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Dooru</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dida</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dreebo</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Darby</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drabski</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Doeri</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "name     Dooru  Dida  Dreebo  Darby  Drabski  Doeri\n",
       "name                                               \n",
       "Dooru        3     1       2      3        2      0\n",
       "Dida         1     1       0      1        1      0\n",
       "Dreebo       2     0       2      2        1      0\n",
       "Darby        3     1       2      3        2      0\n",
       "Drabski      2     1       1      2        2      0\n",
       "Doeri        0     0       0      0        0      1"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adjacency = df.dot(df.T)\n",
    "adjacency"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x108339940>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nHvKNZRa4FnwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107cd1518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(adjacency, cmap=\"YlGnBu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Baseball</th>\n",
       "      <th>Football</th>\n",
       "      <th>Hockey</th>\n",
       "      <th>Tennis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Baseball</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Football</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hockey</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tennis</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Baseball  Football  Hockey  Tennis\n",
       "Baseball         4         3       3       0\n",
       "Football         3         3       2       0\n",
       "Hockey           3         2       4       0\n",
       "Tennis           0         0       0       1"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.T.dot(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10a1a7908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = nx.from_numpy_matrix(adjacency.values)\n",
    "nx.draw(g)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding Paul Revere"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>club</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Adams John</td>\n",
       "      <td>North Caucus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Adams John</td>\n",
       "      <td>Long Room Club</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Adams Samuel</td>\n",
       "      <td>North Caucus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Adams Samuel</td>\n",
       "      <td>Long Room Club</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Adams Samuel</td>\n",
       "      <td>Boston Committee</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           name              club\n",
       "0    Adams John      North Caucus\n",
       "1    Adams John    Long Room Club\n",
       "2  Adams Samuel      North Caucus\n",
       "3  Adams Samuel    Long Room Club\n",
       "4  Adams Samuel  Boston Committee"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"clubs.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert to `0`/`1` as columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>club</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Adams John</th>\n",
       "      <td>North Caucus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Adams John</th>\n",
       "      <td>Long Room Club</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Adams Samuel</th>\n",
       "      <td>North Caucus</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        club\n",
       "name                        \n",
       "Adams John      North Caucus\n",
       "Adams John    Long Room Club\n",
       "Adams Samuel    North Caucus"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.set_index('name', inplace=True)\n",
    "df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>club</th>\n",
       "      <th>Boston Committee</th>\n",
       "      <th>London Enemies</th>\n",
       "      <th>Long Room Club</th>\n",
       "      <th>Loyal Nine</th>\n",
       "      <th>North Caucus</th>\n",
       "      <th>St Andrews Lodge</th>\n",
       "      <th>Tea Party</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Adams John</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Adams Samuel</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Allen Dr</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Appleton Nathaniel</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ash Gilbert</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "club                Boston Committee  London Enemies  Long Room Club  \\\n",
       "name                                                                   \n",
       "Adams John                         0               0               1   \n",
       "Adams Samuel                       1               1               1   \n",
       "Allen Dr                           0               0               0   \n",
       "Appleton Nathaniel                 1               0               0   \n",
       "Ash Gilbert                        0               0               0   \n",
       "\n",
       "club                Loyal Nine  North Caucus  St Andrews Lodge  Tea Party  \n",
       "name                                                                       \n",
       "Adams John                   0             1                 0          0  \n",
       "Adams Samuel                 0             1                 0          0  \n",
       "Allen Dr                     0             1                 0          0  \n",
       "Appleton Nathaniel           0             1                 0          0  \n",
       "Ash Gilbert                  0             0                 1          0  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix = df.pivot(columns='club', values='club').astype(bool).astype(int)\n",
    "matrix.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>name</th>\n",
       "      <th>Adams John</th>\n",
       "      <th>Adams Samuel</th>\n",
       "      <th>Allen Dr</th>\n",
       "      <th>Appleton Nathaniel</th>\n",
       "      <th>Ash Gilbert</th>\n",
       "      <th>Austin Benjamin</th>\n",
       "      <th>Austin Samuel</th>\n",
       "      <th>Avery John</th>\n",
       "      <th>Baldwin Cyrus</th>\n",
       "      <th>Ballard John</th>\n",
       "      <th>...</th>\n",
       "      <th>Whitwell William</th>\n",
       "      <th>Williams Jeremiah</th>\n",
       "      <th>Williams Jonathan</th>\n",
       "      <th>Williams Thomas</th>\n",
       "      <th>Willis Nathaniel</th>\n",
       "      <th>Wingfield William</th>\n",
       "      <th>Winslow John</th>\n",
       "      <th>Winthrop John</th>\n",
       "      <th>Wyeth Joshua</th>\n",
       "      <th>Young Thomas</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Adams John</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Adams Samuel</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Allen Dr</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 254 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "name          Adams John  Adams Samuel  Allen Dr  Appleton Nathaniel  \\\n",
       "name                                                                   \n",
       "Adams John             2             2         1                   1   \n",
       "Adams Samuel           2             4         1                   2   \n",
       "Allen Dr               1             1         1                   1   \n",
       "\n",
       "name          Ash Gilbert  Austin Benjamin  Austin Samuel  Avery John  \\\n",
       "name                                                                    \n",
       "Adams John              0                0              0           0   \n",
       "Adams Samuel            0                1              1           1   \n",
       "Allen Dr                0                0              0           0   \n",
       "\n",
       "name          Baldwin Cyrus  Ballard John      ...       Whitwell William  \\\n",
       "name                                           ...                          \n",
       "Adams John                0             1      ...                      0   \n",
       "Adams Samuel              1             1      ...                      1   \n",
       "Allen Dr                  0             1      ...                      0   \n",
       "\n",
       "name          Williams Jeremiah  Williams Jonathan  Williams Thomas  \\\n",
       "name                                                                  \n",
       "Adams John                    0                  0                0   \n",
       "Adams Samuel                  0                  1                0   \n",
       "Allen Dr                      0                  0                0   \n",
       "\n",
       "name          Willis Nathaniel  Wingfield William  Winslow John  \\\n",
       "name                                                              \n",
       "Adams John                   0                  0             1   \n",
       "Adams Samuel                 0                  0             1   \n",
       "Allen Dr                     0                  0             0   \n",
       "\n",
       "name          Winthrop John  Wyeth Joshua  Young Thomas  \n",
       "name                                                     \n",
       "Adams John                1             0             1  \n",
       "Adams Samuel              2             0             2  \n",
       "Allen Dr                  1             0             1  \n",
       "\n",
       "[3 rows x 254 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix.dot(matrix.T).head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>club</th>\n",
       "      <th>Boston Committee</th>\n",
       "      <th>London Enemies</th>\n",
       "      <th>Long Room Club</th>\n",
       "      <th>Loyal Nine</th>\n",
       "      <th>North Caucus</th>\n",
       "      <th>St Andrews Lodge</th>\n",
       "      <th>Tea Party</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>club</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Boston Committee</th>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>London Enemies</th>\n",
       "      <td>11</td>\n",
       "      <td>62</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Long Room Club</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "club              Boston Committee  London Enemies  Long Room Club  \\\n",
       "club                                                                 \n",
       "Boston Committee                21              11               5   \n",
       "London Enemies                  11              62               5   \n",
       "Long Room Club                   5               5              17   \n",
       "\n",
       "club              Loyal Nine  North Caucus  St Andrews Lodge  Tea Party  \n",
       "club                                                                     \n",
       "Boston Committee           0             9                 1          3  \n",
       "London Enemies             3            16                 3          8  \n",
       "Long Room Club             0             5                 2          2  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Move the transposition to be outside of the dot\n",
    "# AND SUDDENLY IT'S HOW CONNECTED THE CLUBS ARE\n",
    "matrix.T.dot(matrix).head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>club</th>\n",
       "      <th>Boston Committee</th>\n",
       "      <th>London Enemies</th>\n",
       "      <th>Long Room Club</th>\n",
       "      <th>Loyal Nine</th>\n",
       "      <th>North Caucus</th>\n",
       "      <th>St Andrews Lodge</th>\n",
       "      <th>Tea Party</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>club</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Boston Committee</th>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>London Enemies</th>\n",
       "      <td>11</td>\n",
       "      <td>62</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "club              Boston Committee  London Enemies  Long Room Club  \\\n",
       "club                                                                 \n",
       "Boston Committee                21              11               5   \n",
       "London Enemies                  11              62               5   \n",
       "\n",
       "club              Loyal Nine  North Caucus  St Andrews Lodge  Tea Party  \n",
       "club                                                                     \n",
       "Boston Committee           0             9                 1          3  \n",
       "London Enemies             3            16                 3          8  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "club_adj = matrix.T.dot(matrix)\n",
    "club_adj.head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What are the connected clubs?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10a59c4a8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "club_adj = nx.from_numpy_matrix(club_adj.values)\n",
    "\n",
    "pos=nx.spring_layout(club_adj,iterations=20)\n",
    "nx.draw_networkx_edges(club_adj, pos)\n",
    "nx.draw_networkx_nodes(club_adj, pos)\n",
    "nx.draw_networkx_labels(club_adj, pos)\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The connected people?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## No wait, let's use math to find the most connected people instead"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# person_adjacency_graph_centrality=nx.eigenvector_centrality(person_adjacency_graph, max_iter=30)\n",
    "# person_adjacency_graph_centrality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# for name in sorted(person_adjacency_graph_centrality, key=person_adjacency_graph_centrality.get, reverse=True)[0:10]:\n",
    "#     print(name, person_adjacency_graph_centrality[name])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
